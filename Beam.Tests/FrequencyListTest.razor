@inherits TestComponentBase

<Fixture Description="Add a new Frequency appears in the list" Test="TestFrequencyListAdd">
    <ComponentUnderTest>
        <FrequencyList></FrequencyList>
    </ComponentUnderTest>
    <Fragment>
        <li diff:ignore></li>
        <li class:ignore>
            <a href="frequency/2" class="nav-link">
                <span class="oi oi-audio-spectrum" aria-hidden="true"></span>
                <span>
                    Hi
                </span>
            </a>
        </li>
        <li diff:ignore></li>
    </Fragment>
</Fixture>

<Fixture Description="Add a new empty Frequency doesn't appear in the list" Test="EmptyFrequencyDoesntAdd">
    <ComponentUnderTest>
        <FrequencyList></FrequencyList>
    </ComponentUnderTest>
    <Fragment>
        <li diff:ignore></li>
        <li diff:ignore></li>
    </Fragment>
</Fixture>

@code
{
    public void TestFrequencyListAdd(Fixture fixture)
    {
      fixture.Services.AddSingleton<NavigationManager, MockNavigationManager>();
      fixture.Services.AddSingleton<IDataService, TestDataService>();
      // Arrange
      var cut = fixture.GetComponentUnderTest<FrequencyList>();

      // Act - click button to add frequency
      cut.Find("input").Change("Hi");
      cut.Find("form").Submit();

      // Assert that a frequency was added
      var expected = fixture.GetFragment();
      cut.MarkupMatches(expected);
    }

    public void EmptyFrequencyDoesntAdd(Fixture fixture)
    {
      fixture.Services.AddSingleton<NavigationManager, MockNavigationManager>();
      fixture.Services.AddSingleton<IDataService, TestDataService>();
      // Arrange
      var cut = fixture.GetComponentUnderTest<FrequencyList>();

      // Act - click button to add frequency
      cut.Find("form").Submit();

      // Assert that a frequency was added
      var expected = fixture.GetFragment();
      cut.MarkupMatches(expected);
    }
}

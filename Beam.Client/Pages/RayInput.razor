@inject IDataService data;

<p>
  <Card Title="Cast a new ray:">
    <EditForm OnValidSubmit="CastRay" Model="@newRay">
      <DataAnnotationsValidator />
       <div class="input-group">
          <InputTextArea @bind-Value="newRay.Text" class="form-control" />
          <div class="input-group-append">
              <button @onclick="ClearText" type="button" class="btn btn-outline-secondary">
                  <span class="oi oi-circle-x"></span>
              </button>
              <button type="submit" class="btn btn-outline-secondary"><span class="oi oi-audio"></span></button>
          </div>
      </div>
      <ValidationMessage For="@(() => newRay.Text)" />
    </EditForm>
  </Card>
</p>

@code {
  [Parameter]
  public RayToCast newRay { get; set; } = new RayToCast();
  [Parameter]
  public EventCallback<RayToCast> newRayChanged { get; set; } // provides the event the parents component will attach to to get two-way binding, Blazor will do this for us automatically
  [Parameter]
  public EventCallback<string> RayCast { get; set; }
  async Task CastRay()
  {
      await RayCast.InvokeAsync(newRay.Text);
      await data.CreateRay(newRay.Text);
      newRay.Text = "";
  }

  void ClearText()
  {
      newRay.Text = "";
  }
}